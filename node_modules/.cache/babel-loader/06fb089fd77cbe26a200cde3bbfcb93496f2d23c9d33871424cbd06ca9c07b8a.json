{"ast":null,"code":"import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport { Buffer } from 'buffer';\n\n// Type imports\n\n// Ed25519 anahtar çifti oluşturma\nexport const generateKeyPair = () => {\n  const keyPair = nacl.sign.keyPair();\n  return {\n    publicKey: Buffer.from(keyPair.publicKey).toString('hex'),\n    privateKey: Buffer.from(keyPair.secretKey).toString('hex'),\n    publicKeyBase58: bs58.encode(Buffer.from(keyPair.publicKey)),\n    privateKeyBase58: bs58.encode(Buffer.from(keyPair.secretKey))\n  };\n};\n\n// DID oluşturma (publicKey'den farklı bir değer kullanarak)\nexport const generateDID = publicKeyBase58 => {\n  // Verkey'i ters çevirerek ve ilk 16 karakterini alarak DID için farklı bir değer oluştur\n  const reversedKey = publicKeyBase58.split('').reverse().join('');\n  return `did:example:${reversedKey.substring(0, 16)}`;\n};\n\n// Mesaj imzalama\nexport const signMessage = (message, privateKeyHex) => {\n  const privateKeyUint8 = new Uint8Array(Buffer.from(privateKeyHex, 'hex'));\n  const messageUint8 = new Uint8Array(Buffer.from(message));\n  const signature = nacl.sign.detached(messageUint8, privateKeyUint8);\n  return Buffer.from(signature).toString('hex');\n};\n\n// İmza doğrulama\nexport const verifySignature = (message, signatureHex, publicKeyHex) => {\n  try {\n    const publicKeyUint8 = new Uint8Array(Buffer.from(publicKeyHex, 'hex'));\n    const messageUint8 = new Uint8Array(Buffer.from(message));\n    const signatureUint8 = new Uint8Array(Buffer.from(signatureHex, 'hex'));\n    return nacl.sign.detached.verify(messageUint8, signatureUint8, publicKeyUint8);\n  } catch (error) {\n    console.error('İmza doğrulama hatası:', error);\n    return false;\n  }\n};\n\n// Hex formatından Base58'e dönüştürme\nexport const hexToBase58 = hex => {\n  return bs58.encode(Buffer.from(hex, 'hex'));\n};\n\n// Base58'den Hex formatına dönüştürme\nexport const base58ToHex = base58 => {\n  return Buffer.from(bs58.decode(base58)).toString('hex');\n};\n\n// LocalStorage'a veri kaydetme\nexport const saveToLocalStorage = (key, value) => {\n  localStorage.setItem(key, JSON.stringify(value));\n};\n\n// LocalStorage'dan veri okuma\nexport const getFromLocalStorage = key => {\n  const value = localStorage.getItem(key);\n  if (value) {\n    try {\n      return JSON.parse(value);\n    } catch (e) {\n      return value;\n    }\n  }\n  return null;\n};\n\n// DID Dokümanı oluşturma\nexport const generateDIDDocument = (did, publicKeyBase58) => {\n  const now = new Date().toISOString();\n  return {\n    \"@context\": \"https://www.w3.org/ns/did/v1\",\n    \"id\": did,\n    \"verificationMethod\": [{\n      \"id\": `${did}#keys-1`,\n      \"type\": \"Ed25519VerificationKey2018\",\n      \"controller\": did,\n      \"publicKeyBase58\": publicKeyBase58\n    }],\n    \"authentication\": [`${did}#keys-1`],\n    \"created\": now,\n    \"updated\": now\n  };\n};\n\n// Yaş doğrulama - 18 yaşından büyük mü kontrol et\nexport const isAdult = birthDate => {\n  const today = new Date();\n  const birth = new Date(birthDate);\n  let age = today.getFullYear() - birth.getFullYear();\n  const monthDiff = today.getMonth() - birth.getMonth();\n  if (monthDiff < 0 || monthDiff === 0 && today.getDate() < birth.getDate()) {\n    age--;\n  }\n  return age >= 18;\n};\n\n// Yaş doğrulama kredisi oluştur\nexport const createAgeVerificationCredential = (did, publicKeyBase58, birthDate) => {\n  const isUserAdult = isAdult(birthDate);\n  const now = new Date().toISOString();\n  const message = `${did}:isAdult:${isUserAdult}:${now}`;\n  const privateKeyHex = getFromLocalStorage('didKeyPair').privateKey;\n  const signature = signMessage(message, privateKeyHex);\n  const credential = {\n    id: `${did}#age-credential`,\n    type: [\"VerifiableCredential\", \"AgeVerificationCredential\"],\n    issuer: \"did:example:issuer\",\n    issuanceDate: now,\n    credentialSubject: {\n      id: did,\n      isAdult: isUserAdult\n    },\n    proof: {\n      type: \"Ed25519Signature2018\",\n      created: now,\n      verificationMethod: `${did}#keys-1`,\n      proofPurpose: \"assertionMethod\",\n      proofValue: signature\n    }\n  };\n  return credential;\n};\n\n// Yaş doğrulama kredisini doğrula\nexport const verifyAgeCredential = (credential, publicKeyHex) => {\n  try {\n    const message = `${credential.credentialSubject.id}:isAdult:${credential.credentialSubject.isAdult}:${credential.issuanceDate}`;\n    return verifySignature(message, credential.proof.proofValue, publicKeyHex);\n  } catch (error) {\n    console.error('Kredi doğrulama hatası:', error);\n    return false;\n  }\n};\n\n// Kullanıcı verilerini kaydet (doğum tarihi veritabanına kaydedilmez)\nexport const saveUserData = userData => {\n  // Sadece isim ve soyisim kaydedilir, doğum tarihi kaydedilmez\n  const {\n    firstName,\n    lastName\n  } = userData;\n  saveToLocalStorage('userData', {\n    firstName,\n    lastName\n  });\n\n  // Doğum tarihi sadece yaş doğrulama için kullanılır ve sonra atılır\n  const birthDate = userData.birthDate;\n  const isUserAdult = isAdult(birthDate);\n\n  // Sadece 18 yaş üstü olup olmadığı bilgisi kaydedilir\n  const userCredential = {\n    did: getFromLocalStorage('did'),\n    verkey: getFromLocalStorage('didKeyPair').publicKeyBase58,\n    isAdult: isUserAdult,\n    issuanceDate: new Date().toISOString()\n  };\n  saveToLocalStorage('userCredential', userCredential);\n\n  // Doğrulanabilir kredi oluştur\n  const credential = createAgeVerificationCredential(userCredential.did, userCredential.verkey, birthDate);\n  saveToLocalStorage('ageCredential', credential);\n  return userCredential;\n};","map":{"version":3,"names":["nacl","bs58","Buffer","generateKeyPair","keyPair","sign","publicKey","from","toString","privateKey","secretKey","publicKeyBase58","encode","privateKeyBase58","generateDID","reversedKey","split","reverse","join","substring","signMessage","message","privateKeyHex","privateKeyUint8","Uint8Array","messageUint8","signature","detached","verifySignature","signatureHex","publicKeyHex","publicKeyUint8","signatureUint8","verify","error","console","hexToBase58","hex","base58ToHex","base58","decode","saveToLocalStorage","key","value","localStorage","setItem","JSON","stringify","getFromLocalStorage","getItem","parse","e","generateDIDDocument","did","now","Date","toISOString","isAdult","birthDate","today","birth","age","getFullYear","monthDiff","getMonth","getDate","createAgeVerificationCredential","isUserAdult","credential","id","type","issuer","issuanceDate","credentialSubject","proof","created","verificationMethod","proofPurpose","proofValue","verifyAgeCredential","saveUserData","userData","firstName","lastName","userCredential","verkey"],"sources":["/Users/enesdeniz/Documents/GitHub/Hyperledger_indy/examples/did-tutorial/src/utils/cryptoUtils.ts"],"sourcesContent":["import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport { Buffer } from 'buffer';\n\n// Type imports\ntype UserData = {\n  firstName: string;\n  lastName: string;\n  birthDate: string;\n};\n\ntype UserCredential = {\n  did: string;\n  verkey: string;\n  isAdult: boolean;\n  issuanceDate: string;\n};\n\ntype VerifiableCredential = {\n  id: string;\n  type: string[];\n  issuer: string;\n  issuanceDate: string;\n  credentialSubject: {\n    id: string;\n    isAdult: boolean;\n  };\n  proof: {\n    type: string;\n    created: string;\n    verificationMethod: string;\n    proofPurpose: string;\n    proofValue: string;\n  };\n};\n\n// Ed25519 anahtar çifti oluşturma\nexport const generateKeyPair = () => {\n  const keyPair = nacl.sign.keyPair();\n  return {\n    publicKey: Buffer.from(keyPair.publicKey).toString('hex'),\n    privateKey: Buffer.from(keyPair.secretKey).toString('hex'),\n    publicKeyBase58: bs58.encode(Buffer.from(keyPair.publicKey)),\n    privateKeyBase58: bs58.encode(Buffer.from(keyPair.secretKey))\n  };\n};\n\n// DID oluşturma (publicKey'den farklı bir değer kullanarak)\nexport const generateDID = (publicKeyBase58: string) => {\n  // Verkey'i ters çevirerek ve ilk 16 karakterini alarak DID için farklı bir değer oluştur\n  const reversedKey = publicKeyBase58.split('').reverse().join('');\n  return `did:example:${reversedKey.substring(0, 16)}`;\n};\n\n// Mesaj imzalama\nexport const signMessage = (message: string, privateKeyHex: string) => {\n  const privateKeyUint8 = new Uint8Array(Buffer.from(privateKeyHex, 'hex'));\n  const messageUint8 = new Uint8Array(Buffer.from(message));\n  const signature = nacl.sign.detached(messageUint8, privateKeyUint8);\n  return Buffer.from(signature).toString('hex');\n};\n\n// İmza doğrulama\nexport const verifySignature = (message: string, signatureHex: string, publicKeyHex: string) => {\n  try {\n    const publicKeyUint8 = new Uint8Array(Buffer.from(publicKeyHex, 'hex'));\n    const messageUint8 = new Uint8Array(Buffer.from(message));\n    const signatureUint8 = new Uint8Array(Buffer.from(signatureHex, 'hex'));\n    return nacl.sign.detached.verify(messageUint8, signatureUint8, publicKeyUint8);\n  } catch (error) {\n    console.error('İmza doğrulama hatası:', error);\n    return false;\n  }\n};\n\n// Hex formatından Base58'e dönüştürme\nexport const hexToBase58 = (hex: string) => {\n  return bs58.encode(Buffer.from(hex, 'hex'));\n};\n\n// Base58'den Hex formatına dönüştürme\nexport const base58ToHex = (base58: string) => {\n  return Buffer.from(bs58.decode(base58)).toString('hex');\n};\n\n// LocalStorage'a veri kaydetme\nexport const saveToLocalStorage = (key: string, value: any) => {\n  localStorage.setItem(key, JSON.stringify(value));\n};\n\n// LocalStorage'dan veri okuma\nexport const getFromLocalStorage = (key: string) => {\n  const value = localStorage.getItem(key);\n  if (value) {\n    try {\n      return JSON.parse(value);\n    } catch (e) {\n      return value;\n    }\n  }\n  return null;\n};\n\n// DID Dokümanı oluşturma\nexport const generateDIDDocument = (did: string, publicKeyBase58: string) => {\n  const now = new Date().toISOString();\n  return {\n    \"@context\": \"https://www.w3.org/ns/did/v1\",\n    \"id\": did,\n    \"verificationMethod\": [\n      {\n        \"id\": `${did}#keys-1`,\n        \"type\": \"Ed25519VerificationKey2018\",\n        \"controller\": did,\n        \"publicKeyBase58\": publicKeyBase58\n      }\n    ],\n    \"authentication\": [\n      `${did}#keys-1`\n    ],\n    \"created\": now,\n    \"updated\": now\n  };\n};\n\n// Yaş doğrulama - 18 yaşından büyük mü kontrol et\nexport const isAdult = (birthDate: string): boolean => {\n  const today = new Date();\n  const birth = new Date(birthDate);\n  \n  let age = today.getFullYear() - birth.getFullYear();\n  const monthDiff = today.getMonth() - birth.getMonth();\n  \n  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {\n    age--;\n  }\n  \n  return age >= 18;\n};\n\n// Yaş doğrulama kredisi oluştur\nexport const createAgeVerificationCredential = (did: string, publicKeyBase58: string, birthDate: string): VerifiableCredential => {\n  const isUserAdult = isAdult(birthDate);\n  const now = new Date().toISOString();\n  const message = `${did}:isAdult:${isUserAdult}:${now}`;\n  const privateKeyHex = getFromLocalStorage('didKeyPair').privateKey;\n  const signature = signMessage(message, privateKeyHex);\n  \n  const credential: VerifiableCredential = {\n    id: `${did}#age-credential`,\n    type: [\"VerifiableCredential\", \"AgeVerificationCredential\"],\n    issuer: \"did:example:issuer\",\n    issuanceDate: now,\n    credentialSubject: {\n      id: did,\n      isAdult: isUserAdult\n    },\n    proof: {\n      type: \"Ed25519Signature2018\",\n      created: now,\n      verificationMethod: `${did}#keys-1`,\n      proofPurpose: \"assertionMethod\",\n      proofValue: signature\n    }\n  };\n  \n  return credential;\n};\n\n// Yaş doğrulama kredisini doğrula\nexport const verifyAgeCredential = (credential: VerifiableCredential, publicKeyHex: string): boolean => {\n  try {\n    const message = `${credential.credentialSubject.id}:isAdult:${credential.credentialSubject.isAdult}:${credential.issuanceDate}`;\n    return verifySignature(message, credential.proof.proofValue, publicKeyHex);\n  } catch (error) {\n    console.error('Kredi doğrulama hatası:', error);\n    return false;\n  }\n};\n\n// Kullanıcı verilerini kaydet (doğum tarihi veritabanına kaydedilmez)\nexport const saveUserData = (userData: UserData) => {\n  // Sadece isim ve soyisim kaydedilir, doğum tarihi kaydedilmez\n  const { firstName, lastName } = userData;\n  saveToLocalStorage('userData', { firstName, lastName });\n  \n  // Doğum tarihi sadece yaş doğrulama için kullanılır ve sonra atılır\n  const birthDate = userData.birthDate;\n  const isUserAdult = isAdult(birthDate);\n  \n  // Sadece 18 yaş üstü olup olmadığı bilgisi kaydedilir\n  const userCredential: UserCredential = {\n    did: getFromLocalStorage('did'),\n    verkey: getFromLocalStorage('didKeyPair').publicKeyBase58,\n    isAdult: isUserAdult,\n    issuanceDate: new Date().toISOString()\n  };\n  \n  saveToLocalStorage('userCredential', userCredential);\n  \n  // Doğrulanabilir kredi oluştur\n  const credential = createAgeVerificationCredential(\n    userCredential.did,\n    userCredential.verkey,\n    birthDate\n  );\n  \n  saveToLocalStorage('ageCredential', credential);\n  \n  return userCredential;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}