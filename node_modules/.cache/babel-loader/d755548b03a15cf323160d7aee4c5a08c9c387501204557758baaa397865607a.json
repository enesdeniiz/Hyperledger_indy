{"ast":null,"code":"import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\n\n// Ed25519 anahtar çifti oluşturma\nexport const generateKeyPair = () => {\n  const keyPair = nacl.sign.keyPair();\n  return {\n    publicKey: Buffer.from(keyPair.publicKey).toString('hex'),\n    privateKey: Buffer.from(keyPair.secretKey).toString('hex'),\n    publicKeyBase58: bs58.encode(Buffer.from(keyPair.publicKey)),\n    privateKeyBase58: bs58.encode(Buffer.from(keyPair.secretKey))\n  };\n};\n\n// DID oluşturma (publicKey'in ilk 16 karakteri kullanılarak)\nexport const generateDID = publicKeyBase58 => {\n  return `did:example:${publicKeyBase58.substring(0, 16)}`;\n};\n\n// Mesaj imzalama\nexport const signMessage = (message, privateKeyHex) => {\n  const privateKeyUint8 = new Uint8Array(Buffer.from(privateKeyHex, 'hex'));\n  const messageUint8 = new Uint8Array(Buffer.from(message));\n  const signature = nacl.sign.detached(messageUint8, privateKeyUint8);\n  return Buffer.from(signature).toString('hex');\n};\n\n// İmza doğrulama\nexport const verifySignature = (message, signatureHex, publicKeyHex) => {\n  try {\n    const publicKeyUint8 = new Uint8Array(Buffer.from(publicKeyHex, 'hex'));\n    const messageUint8 = new Uint8Array(Buffer.from(message));\n    const signatureUint8 = new Uint8Array(Buffer.from(signatureHex, 'hex'));\n    return nacl.sign.detached.verify(messageUint8, signatureUint8, publicKeyUint8);\n  } catch (error) {\n    console.error('İmza doğrulama hatası:', error);\n    return false;\n  }\n};\n\n// Hex formatından Base58'e dönüştürme\nexport const hexToBase58 = hex => {\n  return bs58.encode(Buffer.from(hex, 'hex'));\n};\n\n// Base58'den Hex formatına dönüştürme\nexport const base58ToHex = base58 => {\n  return Buffer.from(bs58.decode(base58)).toString('hex');\n};\n\n// LocalStorage'a veri kaydetme\nexport const saveToLocalStorage = (key, value) => {\n  localStorage.setItem(key, JSON.stringify(value));\n};\n\n// LocalStorage'dan veri okuma\nexport const getFromLocalStorage = key => {\n  const value = localStorage.getItem(key);\n  if (value) {\n    try {\n      return JSON.parse(value);\n    } catch (e) {\n      return value;\n    }\n  }\n  return null;\n};\n\n// DID Dokümanı oluşturma\nexport const generateDIDDocument = (did, publicKeyBase58) => {\n  const now = new Date().toISOString();\n  return {\n    \"@context\": \"https://www.w3.org/ns/did/v1\",\n    \"id\": did,\n    \"verificationMethod\": [{\n      \"id\": `${did}#keys-1`,\n      \"type\": \"Ed25519VerificationKey2018\",\n      \"controller\": did,\n      \"publicKeyBase58\": publicKeyBase58\n    }],\n    \"authentication\": [`${did}#keys-1`],\n    \"created\": now,\n    \"updated\": now\n  };\n};","map":{"version":3,"names":["nacl","bs58","generateKeyPair","keyPair","sign","publicKey","Buffer","from","toString","privateKey","secretKey","publicKeyBase58","encode","privateKeyBase58","generateDID","substring","signMessage","message","privateKeyHex","privateKeyUint8","Uint8Array","messageUint8","signature","detached","verifySignature","signatureHex","publicKeyHex","publicKeyUint8","signatureUint8","verify","error","console","hexToBase58","hex","base58ToHex","base58","decode","saveToLocalStorage","key","value","localStorage","setItem","JSON","stringify","getFromLocalStorage","getItem","parse","e","generateDIDDocument","did","now","Date","toISOString"],"sources":["/Users/enesdeniz/Documents/GitHub/Hyperledger_indy/examples/did-tutorial/src/utils/cryptoUtils.ts"],"sourcesContent":["import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\n\n// Ed25519 anahtar çifti oluşturma\nexport const generateKeyPair = () => {\n  const keyPair = nacl.sign.keyPair();\n  return {\n    publicKey: Buffer.from(keyPair.publicKey).toString('hex'),\n    privateKey: Buffer.from(keyPair.secretKey).toString('hex'),\n    publicKeyBase58: bs58.encode(Buffer.from(keyPair.publicKey)),\n    privateKeyBase58: bs58.encode(Buffer.from(keyPair.secretKey))\n  };\n};\n\n// DID oluşturma (publicKey'in ilk 16 karakteri kullanılarak)\nexport const generateDID = (publicKeyBase58: string) => {\n  return `did:example:${publicKeyBase58.substring(0, 16)}`;\n};\n\n// Mesaj imzalama\nexport const signMessage = (message: string, privateKeyHex: string) => {\n  const privateKeyUint8 = new Uint8Array(Buffer.from(privateKeyHex, 'hex'));\n  const messageUint8 = new Uint8Array(Buffer.from(message));\n  const signature = nacl.sign.detached(messageUint8, privateKeyUint8);\n  return Buffer.from(signature).toString('hex');\n};\n\n// İmza doğrulama\nexport const verifySignature = (message: string, signatureHex: string, publicKeyHex: string) => {\n  try {\n    const publicKeyUint8 = new Uint8Array(Buffer.from(publicKeyHex, 'hex'));\n    const messageUint8 = new Uint8Array(Buffer.from(message));\n    const signatureUint8 = new Uint8Array(Buffer.from(signatureHex, 'hex'));\n    return nacl.sign.detached.verify(messageUint8, signatureUint8, publicKeyUint8);\n  } catch (error) {\n    console.error('İmza doğrulama hatası:', error);\n    return false;\n  }\n};\n\n// Hex formatından Base58'e dönüştürme\nexport const hexToBase58 = (hex: string) => {\n  return bs58.encode(Buffer.from(hex, 'hex'));\n};\n\n// Base58'den Hex formatına dönüştürme\nexport const base58ToHex = (base58: string) => {\n  return Buffer.from(bs58.decode(base58)).toString('hex');\n};\n\n// LocalStorage'a veri kaydetme\nexport const saveToLocalStorage = (key: string, value: any) => {\n  localStorage.setItem(key, JSON.stringify(value));\n};\n\n// LocalStorage'dan veri okuma\nexport const getFromLocalStorage = (key: string) => {\n  const value = localStorage.getItem(key);\n  if (value) {\n    try {\n      return JSON.parse(value);\n    } catch (e) {\n      return value;\n    }\n  }\n  return null;\n};\n\n// DID Dokümanı oluşturma\nexport const generateDIDDocument = (did: string, publicKeyBase58: string) => {\n  const now = new Date().toISOString();\n  return {\n    \"@context\": \"https://www.w3.org/ns/did/v1\",\n    \"id\": did,\n    \"verificationMethod\": [\n      {\n        \"id\": `${did}#keys-1`,\n        \"type\": \"Ed25519VerificationKey2018\",\n        \"controller\": did,\n        \"publicKeyBase58\": publicKeyBase58\n      }\n    ],\n    \"authentication\": [\n      `${did}#keys-1`\n    ],\n    \"created\": now,\n    \"updated\": now\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}